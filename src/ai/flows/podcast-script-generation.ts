// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Podcast script generation flow.
 *
 * - generatePodcastScript - A function that generates a podcast script based on a keyword and desired length.
 * - GeneratePodcastScriptInput - The input type for the generatePodcastScript function.
 * - GeneratePodcastScriptOutput - The return type for the generatePodcastScript function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

// Define the possible script lengths
const ScriptLengthEnum = z.enum(['short', 'medium', 'long']);
export type ScriptLength = z.infer<typeof ScriptLengthEnum>;

const GeneratePodcastScriptInputSchema = z.object({
  keyword: z.string().describe('The keyword for the podcast script topic.'),
  length: ScriptLengthEnum.default('medium').describe('The desired length of the podcast script (short: ~1-2 mins, medium: ~3-5 mins, long: ~6-8 mins).'),
});
export type GeneratePodcastScriptInput = z.infer<typeof GeneratePodcastScriptInputSchema>;

const GeneratePodcastScriptOutputSchema = z.object({
  script: z.string().describe('The generated podcast script, containing ONLY the words meant to be spoken aloud by a host. Do NOT include any stage directions, speaker names, sound effect cues, comments, titles, introductions like "Podcast Script:", or any other non-spoken text. The output should be directly usable for text-to-speech synthesis.'),
});
export type GeneratePodcastScriptOutput = z.infer<typeof GeneratePodcastScriptOutputSchema>;

export async function generatePodcastScript(input: GeneratePodcastScriptInput): Promise<GeneratePodcastScriptOutput> {
  // Ensure length is provided, defaulting if necessary
  const validatedInput = GeneratePodcastScriptInputSchema.parse(input);
  return generatePodcastScriptFlow(validatedInput);
}

const prompt = ai.definePrompt({
  name: 'podcastScriptPrompt',
  input: {
    schema: GeneratePodcastScriptInputSchema,
  },
  output: {
    schema: GeneratePodcastScriptOutputSchema,
  },
  prompt: `You are a podcast script writer tasked with creating engaging content. Generate a full podcast script based on the provided keyword and desired length. The script should include an introduction, main content sections, and a conclusion, flowing naturally like spoken conversation.

**Keyword:** {{{keyword}}}
**Desired Length:** {{{length}}} (Interpret this as: short ≈ 1-2 minutes speaking time, medium ≈ 3-5 minutes, long ≈ 6-8 minutes). Adjust the depth of content, number of examples, and overall detail accordingly.

**Tone and Style:**
*   Adopt a **conversational and engaging human tone**. Write as if a real person is speaking naturally to an audience.
*   Use language that is accessible and easy to understand, avoiding overly robotic or formal phrasing.
*   Incorporate natural pauses and rhythms of speech through punctuation and sentence structure.
*   Use contractions (like "don't", "it's", "we're") where appropriate for a natural flow.
*   Aim for a style that is informative yet captivating, making the listener feel involved.

**CRITICAL OUTPUT INSTRUCTIONS:**
1.  **Spoken Words ONLY:** The output MUST contain ONLY the words intended to be spoken aloud by the podcast host. This output will be fed directly into a text-to-speech (TTS) engine.
2.  **ABSOLUTELY NO Extra Elements:** Do NOT include any of the following:
    *   Speaker names (e.g., "Host:", "Guest:")
    *   Stage directions (e.g., "[upbeat music fades]", "(pauses briefly)", "[sound of typing]")
    *   Sound effect cues (e.g., "[SFX: door creaks]")
    *   Titles or headings (e.g., "Podcast Script:", "Introduction", "Section 1")
    *   Comments or notes (e.g., "// Remember to emphasize this", "<!-- Check source -->")
    *   Timestamps or section markers (e.g., "[00:30]", "== Section 2 ==")
    *   Any introductory or concluding remarks *about* the script itself (e.g., "Here is the script:", "End of script.")
    *   Any other non-spoken text.
3.  **Formatting:** Use paragraphs to structure the script for readability. Ensure line breaks occur naturally within the spoken dialogue.

Generate the podcast script now, adhering strictly to the tone, length guidance, and **CRITICAL OUTPUT INSTRUCTIONS**. The entire output should be only the spoken words.`,
});


const generatePodcastScriptFlow = ai.defineFlow<
  typeof GeneratePodcastScriptInputSchema,
  typeof GeneratePodcastScriptOutputSchema
>(
  {
    name: 'generatePodcastScriptFlow',
    inputSchema: GeneratePodcastScriptInputSchema,
    outputSchema: GeneratePodcastScriptOutputSchema,
  },
  async input => {
    console.log(`Generating script for keyword: "${input.keyword}", length: ${input.length}`);
    try {
        const {output} = await prompt(input);

        // Genkit/Google AI SDK should handle schema validation based on outputSchema.
        // We just need to ensure the output exists.
        if (!output?.script) {
            console.error("AI output validation failed: Output or script field is missing.", output);
            throw new Error("AI failed to generate a valid script. The output was empty or malformed.");
        }

        // Basic trim, but rely on the prompt/schema for core formatting.
        const finalScript = output.script.trim();

        if (!finalScript) {
             console.error("Script became empty after trimming. Original AI output:", output.script);
            throw new Error("AI generated an empty script. Please try a different keyword.");
        }

        console.log(`Successfully generated ${input.length} script (first 100 chars):`, finalScript.substring(0, 100) + "...");
        return { script: finalScript };

    } catch(error) {
        console.error(`Error in generatePodcastScriptFlow for keyword "${input.keyword}", length "${input.length}":`, error);
        // Re-throw a more user-friendly error or let the calling action handle it.
        // Avoid exposing internal error details directly if possible.
        if (error instanceof Error && error.message.includes("blocked")) {
             throw new Error("Script generation failed due to content safety filters. Please try a different keyword or length.");
        }
         throw new Error("An unexpected error occurred while generating the script.");
    }
  }
);
